#!/bin/bash

# This script is used to query directly at the Prometheus database to examine how certain PromQL queries perform calculations, analyze query results, and 
# debug metric behavior. It access Prometheus pod directly on OCP cluster environment to help understand metric computations.


# Configuration
NAMESPACE="openshift-monitoring"
POD_NAME="prometheus-k8s-1"
CONTAINER_NAME="prometheus"
PROMETHEUS_URL="http://localhost:9090"

# Check if oc binary is available
if ! command -v oc >/dev/null 2>&1; then
    echo "Error: 'oc' binary is not available, please run this script on the environment where oc binary and kubeconfig is available" >&2
    echo "Please install OpenShift CLI (oc) and ensure it's in your PATH" >&2
    echo "You can download it from: https://docs.openshift.com/container-platform/latest/cli_reference/openshift_cli/getting-started-cli.html" >&2
    exit 1
fi 

# Function to display usage
usage() {
    echo "Usage: $0 \"prometheus_query\" [start_time] [end_time]"
    echo "   or: $0 -i \"prometheus_query\" [time]"
    echo ""
    echo "Options:"
    echo "  -i               - Execute an instant query at a specific [time]"
    echo ""
    echo "Arguments:"
    echo "  prometheus_query  - The PromQL query (required)"
    echo "  start_time       - Start time (optional, defaults to 1 hour ago)"
    echo "  end_time         - End time (optional, defaults to now)"
    echo "  time             - Specific time for instant query (optional, defaults to now)"
    echo ""
    echo "Time format examples:"
    echo "  - Unix timestamp: 1640995200"
    echo "  - RFC3339: 2022-01-01T00:00:00Z"
    echo "  - Relative: -1h (1 hour ago)"
    echo ""
    echo "Examples:"
    echo "  $0 \"up\""
    echo "  $0 \"cpu_usage_rate\" \"-2h\" \"-1h\""
    echo "  $0 \"memory_usage\" \"2024-01-01T00:00:00Z\" \"2024-01-01T01:00:00Z\""
    echo "  $0 -i \"up\""
    echo "  $0 -i \"cpu_usage_rate\" \"-1h\""
}

# Check for instant query flag
INSTANT_QUERY=false
if [ "$1" = "-i" ]; then
    INSTANT_QUERY=true
    shift
fi

# Check if query is provided
if [ $# -eq 0 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    usage
    exit 1
fi

# Get arguments
QUERY="$1"

if [ "$INSTANT_QUERY" = true ]; then
    TIME_INPUT="${2:-now}"     # Default to now for instant query
else
    START_INPUT="${2:--1h}"    # Default to 1 hour ago
    END_INPUT="${3:-now}"      # Default to now
fi

# Convert time inputs to Unix timestamps for Prometheus API
convert_to_unix() {
    local time_input="$1"
    
    # Check if input is already a Unix timestamp (10 digits)
    if [[ "$time_input" =~ ^[0-9]{10}$ ]]; then
        echo "$time_input"
        return
    fi
    
    # Handle special cases and convert to Unix timestamp
    case "$time_input" in
        now)
            date +%s
            ;;
        -*)
            # Relative time (e.g., -1h, -30m, -1d)
            date -d "$time_input UTC" +%s 2>/dev/null || {
                echo "Error: Invalid relative time format: $time_input" >&2
                exit 1
            }
            ;;
        *)
            # Try to parse as date string (RFC3339, ISO 8601, etc.)
            date -d "$time_input UTC" +%s 2>/dev/null || {
                echo "Error: Cannot parse date format: $time_input" >&2
                echo "Supported formats: Unix timestamp, 'now', '-1h', '2024-01-01T00:00:00Z', etc." >&2
                exit 1
            }
            ;;
    esac
}

# URL encode function (simple implementation)
urlencode() {
    local string="${1}"
    local strlen=${#string}
    local encoded=""
    local pos c o

    for (( pos=0 ; pos<strlen ; pos++ )); do
        c=${string:$pos:1}
        case "$c" in
            [-_.~a-zA-Z0-9] ) o="${c}" ;;
            * )               printf -v o '%%%02x' "'$c"
        esac
        encoded+="${o}"
    done
    echo "${encoded}"
}

# URL encode the query
ENCODED_QUERY=$(urlencode "$QUERY")

if [ "$INSTANT_QUERY" = true ]; then
    # Instant query
    SPECIFIC_TIME=$(convert_to_unix "$TIME_INPUT")
    
    # Validate timestamp
    if [ -z "$SPECIFIC_TIME" ]; then
        echo "Error: Failed to convert time input to Unix timestamp" >&2
        exit 1
    fi
    
    # Build the curl command for instant query
    CURL_CMD="curl -s '${PROMETHEUS_URL}/api/v1/query?query=${ENCODED_QUERY}&time=${SPECIFIC_TIME}'"
    CURL_CMD_NO_ENCODING="curl -s '${PROMETHEUS_URL}/api/v1/query?query=${QUERY}&time=${SPECIFIC_TIME}'"
    
    echo "Executing instant encoded query: $CURL_CMD"
    echo "Curl command without encoding: $CURL_CMD_NO_ENCODING"
    echo "Time: $TIME_INPUT ($SPECIFIC_TIME)"
    echo "Encoded query: $ENCODED_QUERY"
    echo "---"
    
else
    # Range query (original functionality)
    START_TIME=$(convert_to_unix "$START_INPUT")
    END_TIME=$(convert_to_unix "$END_INPUT")

    # Validate timestamps
    if [ -z "$START_TIME" ] || [ -z "$END_TIME" ]; then
        echo "Error: Failed to convert time inputs to Unix timestamps" >&2
        exit 1
    fi

    # Build the curl command for range query
    CURL_CMD="curl -s '${PROMETHEUS_URL}/api/v1/query_range?query=${ENCODED_QUERY}&start=${START_TIME}&end=${END_TIME}&step=15s'"
    CURL_CMD_NO_ENCODING="curl -s '${PROMETHEUS_URL}/api/v1/query_range?query=${QUERY}&start=${START_TIME}&end=${END_TIME}&step=15s'"

    echo "Executing range query: $CURL_CMD"
    echo "Curl command without encoding: $CURL_CMD_NO_ENCODING"
    echo "Time range: $START_INPUT ($START_TIME) to $END_INPUT ($END_TIME)"
    echo "Encoded query: $ENCODED_QUERY"
    echo "---"
fi

# Execute and capture both stdout and stderr
RESULT=$(oc exec -n "$NAMESPACE" -c "$CONTAINER_NAME" "$POD_NAME" -- bash -c "$CURL_CMD" 2>&1)
EXIT_CODE=$?

if [ $EXIT_CODE -eq 0 ]; then
    # Try to format with jq if available, otherwise show raw output
    if command -v jq >/dev/null 2>&1; then
        echo "$RESULT" | jq '.'
    else
        echo "$RESULT"
    fi
    echo ""
    echo "Query completed successfully"
else
    echo "Error executing query:"
    echo "$RESULT"
    exit 1
fi
